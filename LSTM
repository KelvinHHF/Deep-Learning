{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/KelvinHHF/Deep-Learning/blob/main/LSTM\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "id": "xUKMQnyacLiZ",
        "outputId": "39d4f59a-c536-4476-aa06-6cc710d84291",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd"
      ],
      "metadata": {
        "id": "9xcZtAc3ctF3"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(r'/content/drive/MyDrive/CUHK/STAT 6207 Deep Learning/Project/FACT_FINAL.csv')"
      ],
      "metadata": {
        "id": "CUYBXknMcuns"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "id": "lbyVSjNjcxU9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Split the dataset into validation , test and training dataset"
      ],
      "metadata": {
        "id": "4DYeho4Zn9In"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "valid_df = df[df['Value_Heat_Index'].notna()]"
      ],
      "metadata": {
        "id": "q8sIembxkGkR"
      },
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = df[df['Value_Heat_Index'].isna()].reset_index(drop=True)"
      ],
      "metadata": {
        "id": "pXulgE5Wm7xC"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "from sklearn.preprocessing import MinMaxScaler, OneHotEncoder\n",
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "id": "k4uclqA2eGym"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "help(OneHotEncoder)"
      ],
      "metadata": {
        "id": "L7iKJxsjetCQ",
        "outputId": "5133f4c3-1bd1-4dc2-8817-fea320889b87",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Help on class OneHotEncoder in module sklearn.preprocessing._encoders:\n",
            "\n",
            "class OneHotEncoder(_BaseEncoder)\n",
            " |  OneHotEncoder(*, categories='auto', drop=None, sparse_output=True, dtype=<class 'numpy.float64'>, handle_unknown='error', min_frequency=None, max_categories=None, feature_name_combiner='concat')\n",
            " |  \n",
            " |  Encode categorical features as a one-hot numeric array.\n",
            " |  \n",
            " |  The input to this transformer should be an array-like of integers or\n",
            " |  strings, denoting the values taken on by categorical (discrete) features.\n",
            " |  The features are encoded using a one-hot (aka 'one-of-K' or 'dummy')\n",
            " |  encoding scheme. This creates a binary column for each category and\n",
            " |  returns a sparse matrix or dense array (depending on the ``sparse_output``\n",
            " |  parameter).\n",
            " |  \n",
            " |  By default, the encoder derives the categories based on the unique values\n",
            " |  in each feature. Alternatively, you can also specify the `categories`\n",
            " |  manually.\n",
            " |  \n",
            " |  This encoding is needed for feeding categorical data to many scikit-learn\n",
            " |  estimators, notably linear models and SVMs with the standard kernels.\n",
            " |  \n",
            " |  Note: a one-hot encoding of y labels should use a LabelBinarizer\n",
            " |  instead.\n",
            " |  \n",
            " |  Read more in the :ref:`User Guide <preprocessing_categorical_features>`.\n",
            " |  For a comparison of different encoders, refer to:\n",
            " |  :ref:`sphx_glr_auto_examples_preprocessing_plot_target_encoder.py`.\n",
            " |  \n",
            " |  Parameters\n",
            " |  ----------\n",
            " |  categories : 'auto' or a list of array-like, default='auto'\n",
            " |      Categories (unique values) per feature:\n",
            " |  \n",
            " |      - 'auto' : Determine categories automatically from the training data.\n",
            " |      - list : ``categories[i]`` holds the categories expected in the ith\n",
            " |        column. The passed categories should not mix strings and numeric\n",
            " |        values within a single feature, and should be sorted in case of\n",
            " |        numeric values.\n",
            " |  \n",
            " |      The used categories can be found in the ``categories_`` attribute.\n",
            " |  \n",
            " |      .. versionadded:: 0.20\n",
            " |  \n",
            " |  drop : {'first', 'if_binary'} or an array-like of shape (n_features,),             default=None\n",
            " |      Specifies a methodology to use to drop one of the categories per\n",
            " |      feature. This is useful in situations where perfectly collinear\n",
            " |      features cause problems, such as when feeding the resulting data\n",
            " |      into an unregularized linear regression model.\n",
            " |  \n",
            " |      However, dropping one category breaks the symmetry of the original\n",
            " |      representation and can therefore induce a bias in downstream models,\n",
            " |      for instance for penalized linear classification or regression models.\n",
            " |  \n",
            " |      - None : retain all features (the default).\n",
            " |      - 'first' : drop the first category in each feature. If only one\n",
            " |        category is present, the feature will be dropped entirely.\n",
            " |      - 'if_binary' : drop the first category in each feature with two\n",
            " |        categories. Features with 1 or more than 2 categories are\n",
            " |        left intact.\n",
            " |      - array : ``drop[i]`` is the category in feature ``X[:, i]`` that\n",
            " |        should be dropped.\n",
            " |  \n",
            " |      When `max_categories` or `min_frequency` is configured to group\n",
            " |      infrequent categories, the dropping behavior is handled after the\n",
            " |      grouping.\n",
            " |  \n",
            " |      .. versionadded:: 0.21\n",
            " |         The parameter `drop` was added in 0.21.\n",
            " |  \n",
            " |      .. versionchanged:: 0.23\n",
            " |         The option `drop='if_binary'` was added in 0.23.\n",
            " |  \n",
            " |      .. versionchanged:: 1.1\n",
            " |          Support for dropping infrequent categories.\n",
            " |  \n",
            " |  sparse_output : bool, default=True\n",
            " |      When ``True``, it returns a :class:`scipy.sparse.csr_matrix`,\n",
            " |      i.e. a sparse matrix in \"Compressed Sparse Row\" (CSR) format.\n",
            " |  \n",
            " |      .. versionadded:: 1.2\n",
            " |         `sparse` was renamed to `sparse_output`\n",
            " |  \n",
            " |  dtype : number type, default=np.float64\n",
            " |      Desired dtype of output.\n",
            " |  \n",
            " |  handle_unknown : {'error', 'ignore', 'infrequent_if_exist'},                      default='error'\n",
            " |      Specifies the way unknown categories are handled during :meth:`transform`.\n",
            " |  \n",
            " |      - 'error' : Raise an error if an unknown category is present during transform.\n",
            " |      - 'ignore' : When an unknown category is encountered during\n",
            " |        transform, the resulting one-hot encoded columns for this feature\n",
            " |        will be all zeros. In the inverse transform, an unknown category\n",
            " |        will be denoted as None.\n",
            " |      - 'infrequent_if_exist' : When an unknown category is encountered\n",
            " |        during transform, the resulting one-hot encoded columns for this\n",
            " |        feature will map to the infrequent category if it exists. The\n",
            " |        infrequent category will be mapped to the last position in the\n",
            " |        encoding. During inverse transform, an unknown category will be\n",
            " |        mapped to the category denoted `'infrequent'` if it exists. If the\n",
            " |        `'infrequent'` category does not exist, then :meth:`transform` and\n",
            " |        :meth:`inverse_transform` will handle an unknown category as with\n",
            " |        `handle_unknown='ignore'`. Infrequent categories exist based on\n",
            " |        `min_frequency` and `max_categories`. Read more in the\n",
            " |        :ref:`User Guide <encoder_infrequent_categories>`.\n",
            " |  \n",
            " |      .. versionchanged:: 1.1\n",
            " |          `'infrequent_if_exist'` was added to automatically handle unknown\n",
            " |          categories and infrequent categories.\n",
            " |  \n",
            " |  min_frequency : int or float, default=None\n",
            " |      Specifies the minimum frequency below which a category will be\n",
            " |      considered infrequent.\n",
            " |  \n",
            " |      - If `int`, categories with a smaller cardinality will be considered\n",
            " |        infrequent.\n",
            " |  \n",
            " |      - If `float`, categories with a smaller cardinality than\n",
            " |        `min_frequency * n_samples`  will be considered infrequent.\n",
            " |  \n",
            " |      .. versionadded:: 1.1\n",
            " |          Read more in the :ref:`User Guide <encoder_infrequent_categories>`.\n",
            " |  \n",
            " |  max_categories : int, default=None\n",
            " |      Specifies an upper limit to the number of output features for each input\n",
            " |      feature when considering infrequent categories. If there are infrequent\n",
            " |      categories, `max_categories` includes the category representing the\n",
            " |      infrequent categories along with the frequent categories. If `None`,\n",
            " |      there is no limit to the number of output features.\n",
            " |  \n",
            " |      .. versionadded:: 1.1\n",
            " |          Read more in the :ref:`User Guide <encoder_infrequent_categories>`.\n",
            " |  \n",
            " |  feature_name_combiner : \"concat\" or callable, default=\"concat\"\n",
            " |      Callable with signature `def callable(input_feature, category)` that returns a\n",
            " |      string. This is used to create feature names to be returned by\n",
            " |      :meth:`get_feature_names_out`.\n",
            " |  \n",
            " |      `\"concat\"` concatenates encoded feature name and category with\n",
            " |      `feature + \"_\" + str(category)`.E.g. feature X with values 1, 6, 7 create\n",
            " |      feature names `X_1, X_6, X_7`.\n",
            " |  \n",
            " |      .. versionadded:: 1.3\n",
            " |  \n",
            " |  Attributes\n",
            " |  ----------\n",
            " |  categories_ : list of arrays\n",
            " |      The categories of each feature determined during fitting\n",
            " |      (in order of the features in X and corresponding with the output\n",
            " |      of ``transform``). This includes the category specified in ``drop``\n",
            " |      (if any).\n",
            " |  \n",
            " |  drop_idx_ : array of shape (n_features,)\n",
            " |      - ``drop_idx_[i]`` is the index in ``categories_[i]`` of the category\n",
            " |        to be dropped for each feature.\n",
            " |      - ``drop_idx_[i] = None`` if no category is to be dropped from the\n",
            " |        feature with index ``i``, e.g. when `drop='if_binary'` and the\n",
            " |        feature isn't binary.\n",
            " |      - ``drop_idx_ = None`` if all the transformed features will be\n",
            " |        retained.\n",
            " |  \n",
            " |      If infrequent categories are enabled by setting `min_frequency` or\n",
            " |      `max_categories` to a non-default value and `drop_idx[i]` corresponds\n",
            " |      to a infrequent category, then the entire infrequent category is\n",
            " |      dropped.\n",
            " |  \n",
            " |      .. versionchanged:: 0.23\n",
            " |         Added the possibility to contain `None` values.\n",
            " |  \n",
            " |  infrequent_categories_ : list of ndarray\n",
            " |      Defined only if infrequent categories are enabled by setting\n",
            " |      `min_frequency` or `max_categories` to a non-default value.\n",
            " |      `infrequent_categories_[i]` are the infrequent categories for feature\n",
            " |      `i`. If the feature `i` has no infrequent categories\n",
            " |      `infrequent_categories_[i]` is None.\n",
            " |  \n",
            " |      .. versionadded:: 1.1\n",
            " |  \n",
            " |  n_features_in_ : int\n",
            " |      Number of features seen during :term:`fit`.\n",
            " |  \n",
            " |      .. versionadded:: 1.0\n",
            " |  \n",
            " |  feature_names_in_ : ndarray of shape (`n_features_in_`,)\n",
            " |      Names of features seen during :term:`fit`. Defined only when `X`\n",
            " |      has feature names that are all strings.\n",
            " |  \n",
            " |      .. versionadded:: 1.0\n",
            " |  \n",
            " |  feature_name_combiner : callable or None\n",
            " |      Callable with signature `def callable(input_feature, category)` that returns a\n",
            " |      string. This is used to create feature names to be returned by\n",
            " |      :meth:`get_feature_names_out`.\n",
            " |  \n",
            " |      .. versionadded:: 1.3\n",
            " |  \n",
            " |  See Also\n",
            " |  --------\n",
            " |  OrdinalEncoder : Performs an ordinal (integer)\n",
            " |    encoding of the categorical features.\n",
            " |  TargetEncoder : Encodes categorical features using the target.\n",
            " |  sklearn.feature_extraction.DictVectorizer : Performs a one-hot encoding of\n",
            " |    dictionary items (also handles string-valued features).\n",
            " |  sklearn.feature_extraction.FeatureHasher : Performs an approximate one-hot\n",
            " |    encoding of dictionary items or strings.\n",
            " |  LabelBinarizer : Binarizes labels in a one-vs-all\n",
            " |    fashion.\n",
            " |  MultiLabelBinarizer : Transforms between iterable of\n",
            " |    iterables and a multilabel format, e.g. a (samples x classes) binary\n",
            " |    matrix indicating the presence of a class label.\n",
            " |  \n",
            " |  Examples\n",
            " |  --------\n",
            " |  Given a dataset with two features, we let the encoder find the unique\n",
            " |  values per feature and transform the data to a binary one-hot encoding.\n",
            " |  \n",
            " |  >>> from sklearn.preprocessing import OneHotEncoder\n",
            " |  \n",
            " |  One can discard categories not seen during `fit`:\n",
            " |  \n",
            " |  >>> enc = OneHotEncoder(handle_unknown='ignore')\n",
            " |  >>> X = [['Male', 1], ['Female', 3], ['Female', 2]]\n",
            " |  >>> enc.fit(X)\n",
            " |  OneHotEncoder(handle_unknown='ignore')\n",
            " |  >>> enc.categories_\n",
            " |  [array(['Female', 'Male'], dtype=object), array([1, 2, 3], dtype=object)]\n",
            " |  >>> enc.transform([['Female', 1], ['Male', 4]]).toarray()\n",
            " |  array([[1., 0., 1., 0., 0.],\n",
            " |         [0., 1., 0., 0., 0.]])\n",
            " |  >>> enc.inverse_transform([[0, 1, 1, 0, 0], [0, 0, 0, 1, 0]])\n",
            " |  array([['Male', 1],\n",
            " |         [None, 2]], dtype=object)\n",
            " |  >>> enc.get_feature_names_out(['gender', 'group'])\n",
            " |  array(['gender_Female', 'gender_Male', 'group_1', 'group_2', 'group_3'], ...)\n",
            " |  \n",
            " |  One can always drop the first column for each feature:\n",
            " |  \n",
            " |  >>> drop_enc = OneHotEncoder(drop='first').fit(X)\n",
            " |  >>> drop_enc.categories_\n",
            " |  [array(['Female', 'Male'], dtype=object), array([1, 2, 3], dtype=object)]\n",
            " |  >>> drop_enc.transform([['Female', 1], ['Male', 2]]).toarray()\n",
            " |  array([[0., 0., 0.],\n",
            " |         [1., 1., 0.]])\n",
            " |  \n",
            " |  Or drop a column for feature only having 2 categories:\n",
            " |  \n",
            " |  >>> drop_binary_enc = OneHotEncoder(drop='if_binary').fit(X)\n",
            " |  >>> drop_binary_enc.transform([['Female', 1], ['Male', 2]]).toarray()\n",
            " |  array([[0., 1., 0., 0.],\n",
            " |         [1., 0., 1., 0.]])\n",
            " |  \n",
            " |  One can change the way feature names are created.\n",
            " |  \n",
            " |  >>> def custom_combiner(feature, category):\n",
            " |  ...     return str(feature) + \"_\" + type(category).__name__ + \"_\" + str(category)\n",
            " |  >>> custom_fnames_enc = OneHotEncoder(feature_name_combiner=custom_combiner).fit(X)\n",
            " |  >>> custom_fnames_enc.get_feature_names_out()\n",
            " |  array(['x0_str_Female', 'x0_str_Male', 'x1_int_1', 'x1_int_2', 'x1_int_3'],\n",
            " |        dtype=object)\n",
            " |  \n",
            " |  Infrequent categories are enabled by setting `max_categories` or `min_frequency`.\n",
            " |  \n",
            " |  >>> import numpy as np\n",
            " |  >>> X = np.array([[\"a\"] * 5 + [\"b\"] * 20 + [\"c\"] * 10 + [\"d\"] * 3], dtype=object).T\n",
            " |  >>> ohe = OneHotEncoder(max_categories=3, sparse_output=False).fit(X)\n",
            " |  >>> ohe.infrequent_categories_\n",
            " |  [array(['a', 'd'], dtype=object)]\n",
            " |  >>> ohe.transform([[\"a\"], [\"b\"]])\n",
            " |  array([[0., 0., 1.],\n",
            " |         [1., 0., 0.]])\n",
            " |  \n",
            " |  Method resolution order:\n",
            " |      OneHotEncoder\n",
            " |      _BaseEncoder\n",
            " |      sklearn.base.TransformerMixin\n",
            " |      sklearn.utils._set_output._SetOutputMixin\n",
            " |      sklearn.base.BaseEstimator\n",
            " |      sklearn.utils._estimator_html_repr._HTMLDocumentationLinkMixin\n",
            " |      sklearn.utils._metadata_requests._MetadataRequester\n",
            " |      builtins.object\n",
            " |  \n",
            " |  Methods defined here:\n",
            " |  \n",
            " |  __init__(self, *, categories='auto', drop=None, sparse_output=True, dtype=<class 'numpy.float64'>, handle_unknown='error', min_frequency=None, max_categories=None, feature_name_combiner='concat')\n",
            " |      Initialize self.  See help(type(self)) for accurate signature.\n",
            " |  \n",
            " |  fit(self, X, y=None)\n",
            " |      Fit OneHotEncoder to X.\n",
            " |      \n",
            " |      Parameters\n",
            " |      ----------\n",
            " |      X : array-like of shape (n_samples, n_features)\n",
            " |          The data to determine the categories of each feature.\n",
            " |      \n",
            " |      y : None\n",
            " |          Ignored. This parameter exists only for compatibility with\n",
            " |          :class:`~sklearn.pipeline.Pipeline`.\n",
            " |      \n",
            " |      Returns\n",
            " |      -------\n",
            " |      self\n",
            " |          Fitted encoder.\n",
            " |  \n",
            " |  get_feature_names_out(self, input_features=None)\n",
            " |      Get output feature names for transformation.\n",
            " |      \n",
            " |      Parameters\n",
            " |      ----------\n",
            " |      input_features : array-like of str or None, default=None\n",
            " |          Input features.\n",
            " |      \n",
            " |          - If `input_features` is `None`, then `feature_names_in_` is\n",
            " |            used as feature names in. If `feature_names_in_` is not defined,\n",
            " |            then the following input feature names are generated:\n",
            " |            `[\"x0\", \"x1\", ..., \"x(n_features_in_ - 1)\"]`.\n",
            " |          - If `input_features` is an array-like, then `input_features` must\n",
            " |            match `feature_names_in_` if `feature_names_in_` is defined.\n",
            " |      \n",
            " |      Returns\n",
            " |      -------\n",
            " |      feature_names_out : ndarray of str objects\n",
            " |          Transformed feature names.\n",
            " |  \n",
            " |  inverse_transform(self, X)\n",
            " |      Convert the data back to the original representation.\n",
            " |      \n",
            " |      When unknown categories are encountered (all zeros in the\n",
            " |      one-hot encoding), ``None`` is used to represent this category. If the\n",
            " |      feature with the unknown category has a dropped category, the dropped\n",
            " |      category will be its inverse.\n",
            " |      \n",
            " |      For a given input feature, if there is an infrequent category,\n",
            " |      'infrequent_sklearn' will be used to represent the infrequent category.\n",
            " |      \n",
            " |      Parameters\n",
            " |      ----------\n",
            " |      X : {array-like, sparse matrix} of shape                 (n_samples, n_encoded_features)\n",
            " |          The transformed data.\n",
            " |      \n",
            " |      Returns\n",
            " |      -------\n",
            " |      X_tr : ndarray of shape (n_samples, n_features)\n",
            " |          Inverse transformed array.\n",
            " |  \n",
            " |  transform(self, X)\n",
            " |      Transform X using one-hot encoding.\n",
            " |      \n",
            " |      If `sparse_output=True` (default), it returns an instance of\n",
            " |      :class:`scipy.sparse._csr.csr_matrix` (CSR format).\n",
            " |      \n",
            " |      If there are infrequent categories for a feature, set by specifying\n",
            " |      `max_categories` or `min_frequency`, the infrequent categories are\n",
            " |      grouped into a single category.\n",
            " |      \n",
            " |      Parameters\n",
            " |      ----------\n",
            " |      X : array-like of shape (n_samples, n_features)\n",
            " |          The data to encode.\n",
            " |      \n",
            " |      Returns\n",
            " |      -------\n",
            " |      X_out : {ndarray, sparse matrix} of shape                 (n_samples, n_encoded_features)\n",
            " |          Transformed input. If `sparse_output=True`, a sparse matrix will be\n",
            " |          returned.\n",
            " |  \n",
            " |  ----------------------------------------------------------------------\n",
            " |  Data and other attributes defined here:\n",
            " |  \n",
            " |  __annotations__ = {'_parameter_constraints': <class 'dict'>}\n",
            " |  \n",
            " |  ----------------------------------------------------------------------\n",
            " |  Readonly properties inherited from _BaseEncoder:\n",
            " |  \n",
            " |  infrequent_categories_\n",
            " |      Infrequent categories for each feature.\n",
            " |  \n",
            " |  ----------------------------------------------------------------------\n",
            " |  Methods inherited from sklearn.base.TransformerMixin:\n",
            " |  \n",
            " |  fit_transform(self, X, y=None, **fit_params)\n",
            " |      Fit to data, then transform it.\n",
            " |      \n",
            " |      Fits transformer to `X` and `y` with optional parameters `fit_params`\n",
            " |      and returns a transformed version of `X`.\n",
            " |      \n",
            " |      Parameters\n",
            " |      ----------\n",
            " |      X : array-like of shape (n_samples, n_features)\n",
            " |          Input samples.\n",
            " |      \n",
            " |      y :  array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None\n",
            " |          Target values (None for unsupervised transformations).\n",
            " |      \n",
            " |      **fit_params : dict\n",
            " |          Additional fit parameters.\n",
            " |      \n",
            " |      Returns\n",
            " |      -------\n",
            " |      X_new : ndarray array of shape (n_samples, n_features_new)\n",
            " |          Transformed array.\n",
            " |  \n",
            " |  ----------------------------------------------------------------------\n",
            " |  Methods inherited from sklearn.utils._set_output._SetOutputMixin:\n",
            " |  \n",
            " |  set_output(self, *, transform=None)\n",
            " |      Set output container.\n",
            " |      \n",
            " |      See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`\n",
            " |      for an example on how to use the API.\n",
            " |      \n",
            " |      Parameters\n",
            " |      ----------\n",
            " |      transform : {\"default\", \"pandas\", \"polars\"}, default=None\n",
            " |          Configure output of `transform` and `fit_transform`.\n",
            " |      \n",
            " |          - `\"default\"`: Default output format of a transformer\n",
            " |          - `\"pandas\"`: DataFrame output\n",
            " |          - `\"polars\"`: Polars output\n",
            " |          - `None`: Transform configuration is unchanged\n",
            " |      \n",
            " |          .. versionadded:: 1.4\n",
            " |              `\"polars\"` option was added.\n",
            " |      \n",
            " |      Returns\n",
            " |      -------\n",
            " |      self : estimator instance\n",
            " |          Estimator instance.\n",
            " |  \n",
            " |  ----------------------------------------------------------------------\n",
            " |  Class methods inherited from sklearn.utils._set_output._SetOutputMixin:\n",
            " |  \n",
            " |  __init_subclass__(auto_wrap_output_keys=('transform',), **kwargs) from builtins.type\n",
            " |      Set the ``set_{method}_request`` methods.\n",
            " |      \n",
            " |      This uses PEP-487 [1]_ to set the ``set_{method}_request`` methods. It\n",
            " |      looks for the information available in the set default values which are\n",
            " |      set using ``__metadata_request__*`` class attributes, or inferred\n",
            " |      from method signatures.\n",
            " |      \n",
            " |      The ``__metadata_request__*`` class attributes are used when a method\n",
            " |      does not explicitly accept a metadata through its arguments or if the\n",
            " |      developer would like to specify a request value for those metadata\n",
            " |      which are different from the default ``None``.\n",
            " |      \n",
            " |      References\n",
            " |      ----------\n",
            " |      .. [1] https://www.python.org/dev/peps/pep-0487\n",
            " |  \n",
            " |  ----------------------------------------------------------------------\n",
            " |  Data descriptors inherited from sklearn.utils._set_output._SetOutputMixin:\n",
            " |  \n",
            " |  __dict__\n",
            " |      dictionary for instance variables (if defined)\n",
            " |  \n",
            " |  __weakref__\n",
            " |      list of weak references to the object (if defined)\n",
            " |  \n",
            " |  ----------------------------------------------------------------------\n",
            " |  Methods inherited from sklearn.base.BaseEstimator:\n",
            " |  \n",
            " |  __getstate__(self)\n",
            " |  \n",
            " |  __repr__(self, N_CHAR_MAX=700)\n",
            " |      Return repr(self).\n",
            " |  \n",
            " |  __setstate__(self, state)\n",
            " |  \n",
            " |  __sklearn_clone__(self)\n",
            " |  \n",
            " |  get_params(self, deep=True)\n",
            " |      Get parameters for this estimator.\n",
            " |      \n",
            " |      Parameters\n",
            " |      ----------\n",
            " |      deep : bool, default=True\n",
            " |          If True, will return the parameters for this estimator and\n",
            " |          contained subobjects that are estimators.\n",
            " |      \n",
            " |      Returns\n",
            " |      -------\n",
            " |      params : dict\n",
            " |          Parameter names mapped to their values.\n",
            " |  \n",
            " |  set_params(self, **params)\n",
            " |      Set the parameters of this estimator.\n",
            " |      \n",
            " |      The method works on simple estimators as well as on nested objects\n",
            " |      (such as :class:`~sklearn.pipeline.Pipeline`). The latter have\n",
            " |      parameters of the form ``<component>__<parameter>`` so that it's\n",
            " |      possible to update each component of a nested object.\n",
            " |      \n",
            " |      Parameters\n",
            " |      ----------\n",
            " |      **params : dict\n",
            " |          Estimator parameters.\n",
            " |      \n",
            " |      Returns\n",
            " |      -------\n",
            " |      self : estimator instance\n",
            " |          Estimator instance.\n",
            " |  \n",
            " |  ----------------------------------------------------------------------\n",
            " |  Methods inherited from sklearn.utils._metadata_requests._MetadataRequester:\n",
            " |  \n",
            " |  get_metadata_routing(self)\n",
            " |      Get metadata routing of this object.\n",
            " |      \n",
            " |      Please check :ref:`User Guide <metadata_routing>` on how the routing\n",
            " |      mechanism works.\n",
            " |      \n",
            " |      Returns\n",
            " |      -------\n",
            " |      routing : MetadataRequest\n",
            " |          A :class:`~sklearn.utils.metadata_routing.MetadataRequest` encapsulating\n",
            " |          routing information.\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "how to handle different region dataset in one go"
      ],
      "metadata": {
        "id": "7i3Wogpiezk-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "encoder = OneHotEncoder(sparse_output=False)  # Ensure dense output"
      ],
      "metadata": {
        "id": "yN6FWgleeMmu"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "region_encoded = encoder.fit_transform(df[['WeatherStationName_en']])\n"
      ],
      "metadata": {
        "id": "aFovMN2AiGPC"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "region_df = pd.DataFrame(region_encoded, columns=encoder.get_feature_names_out(['WeatherStationName_en']))"
      ],
      "metadata": {
        "id": "n5oeDFULfGXk"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "region_df.head()"
      ],
      "metadata": {
        "id": "d1zm6tF0fMTG",
        "outputId": "b0de879c-5563-4203-f3bf-404ae6dc1d8d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 244
        }
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   WeatherStationName_en_Cheung Chau  \\\n",
              "0                                0.0   \n",
              "1                                0.0   \n",
              "2                                0.0   \n",
              "3                                0.0   \n",
              "4                                0.0   \n",
              "\n",
              "   WeatherStationName_en_Hong Kong International Airport  \\\n",
              "0                                                0.0       \n",
              "1                                                0.0       \n",
              "2                                                0.0       \n",
              "3                                                0.0       \n",
              "4                                                0.0       \n",
              "\n",
              "   WeatherStationName_en_King's Park  WeatherStationName_en_Lau Fau Shan  \\\n",
              "0                                0.0                                 0.0   \n",
              "1                                0.0                                 0.0   \n",
              "2                                0.0                                 0.0   \n",
              "3                                0.0                                 0.0   \n",
              "4                                0.0                                 0.0   \n",
              "\n",
              "   WeatherStationName_en_Peng Chau  WeatherStationName_en_Sai Kung  \\\n",
              "0                              0.0                             0.0   \n",
              "1                              0.0                             0.0   \n",
              "2                              0.0                             0.0   \n",
              "3                              0.0                             0.0   \n",
              "4                              0.0                             0.0   \n",
              "\n",
              "   WeatherStationName_en_Sha Tin  WeatherStationName_en_Shek Kong  \\\n",
              "0                            1.0                              0.0   \n",
              "1                            1.0                              0.0   \n",
              "2                            1.0                              0.0   \n",
              "3                            1.0                              0.0   \n",
              "4                            1.0                              0.0   \n",
              "\n",
              "   WeatherStationName_en_Ta Kwu Ling  WeatherStationName_en_Tate's Cairn  \\\n",
              "0                                0.0                                 0.0   \n",
              "1                                0.0                                 0.0   \n",
              "2                                0.0                                 0.0   \n",
              "3                                0.0                                 0.0   \n",
              "4                                0.0                                 0.0   \n",
              "\n",
              "   WeatherStationName_en_Tseung Kwan O  WeatherStationName_en_Tuen Mun  \\\n",
              "0                                  0.0                             0.0   \n",
              "1                                  0.0                             0.0   \n",
              "2                                  0.0                             0.0   \n",
              "3                                  0.0                             0.0   \n",
              "4                                  0.0                             0.0   \n",
              "\n",
              "   WeatherStationName_en_Waglan Island  WeatherStationName_en_Wetland Park  \\\n",
              "0                                  0.0                                 0.0   \n",
              "1                                  0.0                                 0.0   \n",
              "2                                  0.0                                 0.0   \n",
              "3                                  0.0                                 0.0   \n",
              "4                                  0.0                                 0.0   \n",
              "\n",
              "   WeatherStationName_en_Wong Chuk Hang  \n",
              "0                                   0.0  \n",
              "1                                   0.0  \n",
              "2                                   0.0  \n",
              "3                                   0.0  \n",
              "4                                   0.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8d91aa78-d20b-4a71-844f-a72a805f5052\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>WeatherStationName_en_Cheung Chau</th>\n",
              "      <th>WeatherStationName_en_Hong Kong International Airport</th>\n",
              "      <th>WeatherStationName_en_King's Park</th>\n",
              "      <th>WeatherStationName_en_Lau Fau Shan</th>\n",
              "      <th>WeatherStationName_en_Peng Chau</th>\n",
              "      <th>WeatherStationName_en_Sai Kung</th>\n",
              "      <th>WeatherStationName_en_Sha Tin</th>\n",
              "      <th>WeatherStationName_en_Shek Kong</th>\n",
              "      <th>WeatherStationName_en_Ta Kwu Ling</th>\n",
              "      <th>WeatherStationName_en_Tate's Cairn</th>\n",
              "      <th>WeatherStationName_en_Tseung Kwan O</th>\n",
              "      <th>WeatherStationName_en_Tuen Mun</th>\n",
              "      <th>WeatherStationName_en_Waglan Island</th>\n",
              "      <th>WeatherStationName_en_Wetland Park</th>\n",
              "      <th>WeatherStationName_en_Wong Chuk Hang</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8d91aa78-d20b-4a71-844f-a72a805f5052')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8d91aa78-d20b-4a71-844f-a72a805f5052 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8d91aa78-d20b-4a71-844f-a72a805f5052');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7e999db7-0203-4a4f-aa23-7a5ac6588a00\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7e999db7-0203-4a4f-aa23-7a5ac6588a00')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7e999db7-0203-4a4f-aa23-7a5ac6588a00 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "region_df"
            }
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "new_df = pd.concat([region_df, df.drop(['WeatherStationName_en'], axis=1)], axis=1)"
      ],
      "metadata": {
        "id": "NFnqPrDbifnV"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "new_df"
      ],
      "metadata": {
        "id": "97sD-8ISikJw",
        "outputId": "cb2f4c3e-7b73-4631-d8e9-3ff3329b1461",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 461
        }
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        WeatherStationName_en_Cheung Chau  \\\n",
              "0                                     0.0   \n",
              "1                                     0.0   \n",
              "2                                     0.0   \n",
              "3                                     0.0   \n",
              "4                                     0.0   \n",
              "...                                   ...   \n",
              "152357                                0.0   \n",
              "152358                                0.0   \n",
              "152359                                0.0   \n",
              "152360                                0.0   \n",
              "152361                                0.0   \n",
              "\n",
              "        WeatherStationName_en_Hong Kong International Airport  \\\n",
              "0                                                     0.0       \n",
              "1                                                     0.0       \n",
              "2                                                     0.0       \n",
              "3                                                     0.0       \n",
              "4                                                     0.0       \n",
              "...                                                   ...       \n",
              "152357                                                0.0       \n",
              "152358                                                0.0       \n",
              "152359                                                0.0       \n",
              "152360                                                0.0       \n",
              "152361                                                0.0       \n",
              "\n",
              "        WeatherStationName_en_King's Park  WeatherStationName_en_Lau Fau Shan  \\\n",
              "0                                     0.0                                 0.0   \n",
              "1                                     0.0                                 0.0   \n",
              "2                                     0.0                                 0.0   \n",
              "3                                     0.0                                 0.0   \n",
              "4                                     0.0                                 0.0   \n",
              "...                                   ...                                 ...   \n",
              "152357                                0.0                                 0.0   \n",
              "152358                                0.0                                 0.0   \n",
              "152359                                0.0                                 0.0   \n",
              "152360                                0.0                                 0.0   \n",
              "152361                                0.0                                 0.0   \n",
              "\n",
              "        WeatherStationName_en_Peng Chau  WeatherStationName_en_Sai Kung  \\\n",
              "0                                   0.0                             0.0   \n",
              "1                                   0.0                             0.0   \n",
              "2                                   0.0                             0.0   \n",
              "3                                   0.0                             0.0   \n",
              "4                                   0.0                             0.0   \n",
              "...                                 ...                             ...   \n",
              "152357                              0.0                             0.0   \n",
              "152358                              0.0                             0.0   \n",
              "152359                              0.0                             0.0   \n",
              "152360                              0.0                             0.0   \n",
              "152361                              0.0                             0.0   \n",
              "\n",
              "        WeatherStationName_en_Sha Tin  WeatherStationName_en_Shek Kong  \\\n",
              "0                                 1.0                              0.0   \n",
              "1                                 1.0                              0.0   \n",
              "2                                 1.0                              0.0   \n",
              "3                                 1.0                              0.0   \n",
              "4                                 1.0                              0.0   \n",
              "...                               ...                              ...   \n",
              "152357                            0.0                              0.0   \n",
              "152358                            0.0                              0.0   \n",
              "152359                            0.0                              0.0   \n",
              "152360                            0.0                              0.0   \n",
              "152361                            0.0                              0.0   \n",
              "\n",
              "        WeatherStationName_en_Ta Kwu Ling  WeatherStationName_en_Tate's Cairn  \\\n",
              "0                                     0.0                                 0.0   \n",
              "1                                     0.0                                 0.0   \n",
              "2                                     0.0                                 0.0   \n",
              "3                                     0.0                                 0.0   \n",
              "4                                     0.0                                 0.0   \n",
              "...                                   ...                                 ...   \n",
              "152357                                0.0                                 0.0   \n",
              "152358                                0.0                                 0.0   \n",
              "152359                                0.0                                 0.0   \n",
              "152360                                0.0                                 0.0   \n",
              "152361                                0.0                                 0.0   \n",
              "\n",
              "        ...  WeatherStationName_en_Wetland Park  \\\n",
              "0       ...                                 0.0   \n",
              "1       ...                                 0.0   \n",
              "2       ...                                 0.0   \n",
              "3       ...                                 0.0   \n",
              "4       ...                                 0.0   \n",
              "...     ...                                 ...   \n",
              "152357  ...                                 0.0   \n",
              "152358  ...                                 0.0   \n",
              "152359  ...                                 0.0   \n",
              "152360  ...                                 1.0   \n",
              "152361  ...                                 0.0   \n",
              "\n",
              "        WeatherStationName_en_Wong Chuk Hang  Year  Month  Day  \\\n",
              "0                                        0.0  1984     10    2   \n",
              "1                                        0.0  1984     10    3   \n",
              "2                                        0.0  1984     10    4   \n",
              "3                                        0.0  1984     10    5   \n",
              "4                                        0.0  1984     10    7   \n",
              "...                                      ...   ...    ...  ...   \n",
              "152357                                   0.0  2024     10   31   \n",
              "152358                                   0.0  2024     10   31   \n",
              "152359                                   0.0  2024     10   31   \n",
              "152360                                   0.0  2024     10   31   \n",
              "152361                                   1.0  2024     10   31   \n",
              "\n",
              "        Value_Humidity  Value_Temperature  Value_Wind_Speed  \\\n",
              "0                 76.0               27.5               5.3   \n",
              "1                 71.0               27.6               4.0   \n",
              "2                 73.0               26.9               5.3   \n",
              "3                 75.0               25.5               7.9   \n",
              "4                 71.0               24.4               5.3   \n",
              "...                ...                ...               ...   \n",
              "152357            59.0               26.2               7.4   \n",
              "152358            52.0               26.1               9.5   \n",
              "152359            61.0               26.2              23.1   \n",
              "152360            61.0               26.2               3.2   \n",
              "152361            53.0               27.3               9.5   \n",
              "\n",
              "        Value_Wind_Direction  Value_Heat_Index  \n",
              "0                      110.0               NaN  \n",
              "1                      240.0               NaN  \n",
              "2                      230.0               NaN  \n",
              "3                       30.0               NaN  \n",
              "4                       40.0               NaN  \n",
              "...                      ...               ...  \n",
              "152357                 360.0               NaN  \n",
              "152358                 350.0               NaN  \n",
              "152359                 340.0               NaN  \n",
              "152360                 340.0               NaN  \n",
              "152361                 320.0               NaN  \n",
              "\n",
              "[152362 rows x 23 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fe8bb991-309b-4390-a554-abe186d3a2e0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>WeatherStationName_en_Cheung Chau</th>\n",
              "      <th>WeatherStationName_en_Hong Kong International Airport</th>\n",
              "      <th>WeatherStationName_en_King's Park</th>\n",
              "      <th>WeatherStationName_en_Lau Fau Shan</th>\n",
              "      <th>WeatherStationName_en_Peng Chau</th>\n",
              "      <th>WeatherStationName_en_Sai Kung</th>\n",
              "      <th>WeatherStationName_en_Sha Tin</th>\n",
              "      <th>WeatherStationName_en_Shek Kong</th>\n",
              "      <th>WeatherStationName_en_Ta Kwu Ling</th>\n",
              "      <th>WeatherStationName_en_Tate's Cairn</th>\n",
              "      <th>...</th>\n",
              "      <th>WeatherStationName_en_Wetland Park</th>\n",
              "      <th>WeatherStationName_en_Wong Chuk Hang</th>\n",
              "      <th>Year</th>\n",
              "      <th>Month</th>\n",
              "      <th>Day</th>\n",
              "      <th>Value_Humidity</th>\n",
              "      <th>Value_Temperature</th>\n",
              "      <th>Value_Wind_Speed</th>\n",
              "      <th>Value_Wind_Direction</th>\n",
              "      <th>Value_Heat_Index</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1984</td>\n",
              "      <td>10</td>\n",
              "      <td>2</td>\n",
              "      <td>76.0</td>\n",
              "      <td>27.5</td>\n",
              "      <td>5.3</td>\n",
              "      <td>110.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1984</td>\n",
              "      <td>10</td>\n",
              "      <td>3</td>\n",
              "      <td>71.0</td>\n",
              "      <td>27.6</td>\n",
              "      <td>4.0</td>\n",
              "      <td>240.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1984</td>\n",
              "      <td>10</td>\n",
              "      <td>4</td>\n",
              "      <td>73.0</td>\n",
              "      <td>26.9</td>\n",
              "      <td>5.3</td>\n",
              "      <td>230.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1984</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>75.0</td>\n",
              "      <td>25.5</td>\n",
              "      <td>7.9</td>\n",
              "      <td>30.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1984</td>\n",
              "      <td>10</td>\n",
              "      <td>7</td>\n",
              "      <td>71.0</td>\n",
              "      <td>24.4</td>\n",
              "      <td>5.3</td>\n",
              "      <td>40.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>152357</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2024</td>\n",
              "      <td>10</td>\n",
              "      <td>31</td>\n",
              "      <td>59.0</td>\n",
              "      <td>26.2</td>\n",
              "      <td>7.4</td>\n",
              "      <td>360.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>152358</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2024</td>\n",
              "      <td>10</td>\n",
              "      <td>31</td>\n",
              "      <td>52.0</td>\n",
              "      <td>26.1</td>\n",
              "      <td>9.5</td>\n",
              "      <td>350.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>152359</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2024</td>\n",
              "      <td>10</td>\n",
              "      <td>31</td>\n",
              "      <td>61.0</td>\n",
              "      <td>26.2</td>\n",
              "      <td>23.1</td>\n",
              "      <td>340.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>152360</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2024</td>\n",
              "      <td>10</td>\n",
              "      <td>31</td>\n",
              "      <td>61.0</td>\n",
              "      <td>26.2</td>\n",
              "      <td>3.2</td>\n",
              "      <td>340.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>152361</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2024</td>\n",
              "      <td>10</td>\n",
              "      <td>31</td>\n",
              "      <td>53.0</td>\n",
              "      <td>27.3</td>\n",
              "      <td>9.5</td>\n",
              "      <td>320.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>152362 rows × 23 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fe8bb991-309b-4390-a554-abe186d3a2e0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fe8bb991-309b-4390-a554-abe186d3a2e0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fe8bb991-309b-4390-a554-abe186d3a2e0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8d9a4e5a-cb59-4d7e-9f8c-e1301454b1a1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8d9a4e5a-cb59-4d7e-9f8c-e1301454b1a1')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8d9a4e5a-cb59-4d7e-9f8c-e1301454b1a1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "new_df"
            }
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "# Define numerical columns to normalize\n",
        "numerical_columns = ['Value_Humidity', 'Value_Temperature', 'Value_Wind_Speed', 'Value_Wind_Direction']\n",
        "\n",
        "# Initialize the MinMaxScaler\n",
        "scaler = MinMaxScaler()\n",
        "\n",
        "# Apply normalization to numerical columns\n",
        "new_df[numerical_columns] = scaler.fit_transform(new_df[numerical_columns])\n",
        "\n",
        "# Check the normalized DataFrame\n",
        "print(new_df.head())"
      ],
      "metadata": {
        "id": "NXHt83iWipBR",
        "outputId": "de5a86d4-f3e1-406c-e23c-9217d1bbb56c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   WeatherStationName_en_Cheung Chau  \\\n",
            "0                                0.0   \n",
            "1                                0.0   \n",
            "2                                0.0   \n",
            "3                                0.0   \n",
            "4                                0.0   \n",
            "\n",
            "   WeatherStationName_en_Hong Kong International Airport  \\\n",
            "0                                                0.0       \n",
            "1                                                0.0       \n",
            "2                                                0.0       \n",
            "3                                                0.0       \n",
            "4                                                0.0       \n",
            "\n",
            "   WeatherStationName_en_King's Park  WeatherStationName_en_Lau Fau Shan  \\\n",
            "0                                0.0                                 0.0   \n",
            "1                                0.0                                 0.0   \n",
            "2                                0.0                                 0.0   \n",
            "3                                0.0                                 0.0   \n",
            "4                                0.0                                 0.0   \n",
            "\n",
            "   WeatherStationName_en_Peng Chau  WeatherStationName_en_Sai Kung  \\\n",
            "0                              0.0                             0.0   \n",
            "1                              0.0                             0.0   \n",
            "2                              0.0                             0.0   \n",
            "3                              0.0                             0.0   \n",
            "4                              0.0                             0.0   \n",
            "\n",
            "   WeatherStationName_en_Sha Tin  WeatherStationName_en_Shek Kong  \\\n",
            "0                            1.0                              0.0   \n",
            "1                            1.0                              0.0   \n",
            "2                            1.0                              0.0   \n",
            "3                            1.0                              0.0   \n",
            "4                            1.0                              0.0   \n",
            "\n",
            "   WeatherStationName_en_Ta Kwu Ling  WeatherStationName_en_Tate's Cairn  ...  \\\n",
            "0                                0.0                                 0.0  ...   \n",
            "1                                0.0                                 0.0  ...   \n",
            "2                                0.0                                 0.0  ...   \n",
            "3                                0.0                                 0.0  ...   \n",
            "4                                0.0                                 0.0  ...   \n",
            "\n",
            "   WeatherStationName_en_Wetland Park  WeatherStationName_en_Wong Chuk Hang  \\\n",
            "0                                 0.0                                   0.0   \n",
            "1                                 0.0                                   0.0   \n",
            "2                                 0.0                                   0.0   \n",
            "3                                 0.0                                   0.0   \n",
            "4                                 0.0                                   0.0   \n",
            "\n",
            "   Year  Month  Day  Value_Humidity  Value_Temperature  Value_Wind_Speed  \\\n",
            "0  1984     10    2        0.717647           0.800623          0.051910   \n",
            "1  1984     10    3        0.658824           0.803738          0.039177   \n",
            "2  1984     10    4        0.682353           0.781931          0.051910   \n",
            "3  1984     10    5        0.705882           0.738318          0.077375   \n",
            "4  1984     10    7        0.658824           0.704050          0.051910   \n",
            "\n",
            "   Value_Wind_Direction  Value_Heat_Index  \n",
            "0              0.285714               NaN  \n",
            "1              0.657143               NaN  \n",
            "2              0.628571               NaN  \n",
            "3              0.057143               NaN  \n",
            "4              0.085714               NaN  \n",
            "\n",
            "[5 rows x 23 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "new_df.head()"
      ],
      "metadata": {
        "id": "oVCC6OfmiyG7",
        "outputId": "aca8a29d-067a-45ba-9ed6-f81d496083b0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 273
        }
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   WeatherStationName_en_Cheung Chau  \\\n",
              "0                                0.0   \n",
              "1                                0.0   \n",
              "2                                0.0   \n",
              "3                                0.0   \n",
              "4                                0.0   \n",
              "\n",
              "   WeatherStationName_en_Hong Kong International Airport  \\\n",
              "0                                                0.0       \n",
              "1                                                0.0       \n",
              "2                                                0.0       \n",
              "3                                                0.0       \n",
              "4                                                0.0       \n",
              "\n",
              "   WeatherStationName_en_King's Park  WeatherStationName_en_Lau Fau Shan  \\\n",
              "0                                0.0                                 0.0   \n",
              "1                                0.0                                 0.0   \n",
              "2                                0.0                                 0.0   \n",
              "3                                0.0                                 0.0   \n",
              "4                                0.0                                 0.0   \n",
              "\n",
              "   WeatherStationName_en_Peng Chau  WeatherStationName_en_Sai Kung  \\\n",
              "0                              0.0                             0.0   \n",
              "1                              0.0                             0.0   \n",
              "2                              0.0                             0.0   \n",
              "3                              0.0                             0.0   \n",
              "4                              0.0                             0.0   \n",
              "\n",
              "   WeatherStationName_en_Sha Tin  WeatherStationName_en_Shek Kong  \\\n",
              "0                            1.0                              0.0   \n",
              "1                            1.0                              0.0   \n",
              "2                            1.0                              0.0   \n",
              "3                            1.0                              0.0   \n",
              "4                            1.0                              0.0   \n",
              "\n",
              "   WeatherStationName_en_Ta Kwu Ling  WeatherStationName_en_Tate's Cairn  ...  \\\n",
              "0                                0.0                                 0.0  ...   \n",
              "1                                0.0                                 0.0  ...   \n",
              "2                                0.0                                 0.0  ...   \n",
              "3                                0.0                                 0.0  ...   \n",
              "4                                0.0                                 0.0  ...   \n",
              "\n",
              "   WeatherStationName_en_Wetland Park  WeatherStationName_en_Wong Chuk Hang  \\\n",
              "0                                 0.0                                   0.0   \n",
              "1                                 0.0                                   0.0   \n",
              "2                                 0.0                                   0.0   \n",
              "3                                 0.0                                   0.0   \n",
              "4                                 0.0                                   0.0   \n",
              "\n",
              "   Year  Month  Day  Value_Humidity  Value_Temperature  Value_Wind_Speed  \\\n",
              "0  1984     10    2        0.717647           0.800623          0.051910   \n",
              "1  1984     10    3        0.658824           0.803738          0.039177   \n",
              "2  1984     10    4        0.682353           0.781931          0.051910   \n",
              "3  1984     10    5        0.705882           0.738318          0.077375   \n",
              "4  1984     10    7        0.658824           0.704050          0.051910   \n",
              "\n",
              "   Value_Wind_Direction  Value_Heat_Index  \n",
              "0              0.285714               NaN  \n",
              "1              0.657143               NaN  \n",
              "2              0.628571               NaN  \n",
              "3              0.057143               NaN  \n",
              "4              0.085714               NaN  \n",
              "\n",
              "[5 rows x 23 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-52ac1e1e-ee47-4775-9b64-f2d97e6788c5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>WeatherStationName_en_Cheung Chau</th>\n",
              "      <th>WeatherStationName_en_Hong Kong International Airport</th>\n",
              "      <th>WeatherStationName_en_King's Park</th>\n",
              "      <th>WeatherStationName_en_Lau Fau Shan</th>\n",
              "      <th>WeatherStationName_en_Peng Chau</th>\n",
              "      <th>WeatherStationName_en_Sai Kung</th>\n",
              "      <th>WeatherStationName_en_Sha Tin</th>\n",
              "      <th>WeatherStationName_en_Shek Kong</th>\n",
              "      <th>WeatherStationName_en_Ta Kwu Ling</th>\n",
              "      <th>WeatherStationName_en_Tate's Cairn</th>\n",
              "      <th>...</th>\n",
              "      <th>WeatherStationName_en_Wetland Park</th>\n",
              "      <th>WeatherStationName_en_Wong Chuk Hang</th>\n",
              "      <th>Year</th>\n",
              "      <th>Month</th>\n",
              "      <th>Day</th>\n",
              "      <th>Value_Humidity</th>\n",
              "      <th>Value_Temperature</th>\n",
              "      <th>Value_Wind_Speed</th>\n",
              "      <th>Value_Wind_Direction</th>\n",
              "      <th>Value_Heat_Index</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1984</td>\n",
              "      <td>10</td>\n",
              "      <td>2</td>\n",
              "      <td>0.717647</td>\n",
              "      <td>0.800623</td>\n",
              "      <td>0.051910</td>\n",
              "      <td>0.285714</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1984</td>\n",
              "      <td>10</td>\n",
              "      <td>3</td>\n",
              "      <td>0.658824</td>\n",
              "      <td>0.803738</td>\n",
              "      <td>0.039177</td>\n",
              "      <td>0.657143</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1984</td>\n",
              "      <td>10</td>\n",
              "      <td>4</td>\n",
              "      <td>0.682353</td>\n",
              "      <td>0.781931</td>\n",
              "      <td>0.051910</td>\n",
              "      <td>0.628571</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1984</td>\n",
              "      <td>10</td>\n",
              "      <td>5</td>\n",
              "      <td>0.705882</td>\n",
              "      <td>0.738318</td>\n",
              "      <td>0.077375</td>\n",
              "      <td>0.057143</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1984</td>\n",
              "      <td>10</td>\n",
              "      <td>7</td>\n",
              "      <td>0.658824</td>\n",
              "      <td>0.704050</td>\n",
              "      <td>0.051910</td>\n",
              "      <td>0.085714</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 23 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-52ac1e1e-ee47-4775-9b64-f2d97e6788c5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-52ac1e1e-ee47-4775-9b64-f2d97e6788c5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-52ac1e1e-ee47-4775-9b64-f2d97e6788c5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-46c0771f-6930-46a9-b523-5d5d0bcb4a1a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-46c0771f-6930-46a9-b523-5d5d0bcb4a1a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-46c0771f-6930-46a9-b523-5d5d0bcb4a1a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "new_df"
            }
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SKQ4bH7qMGrA"
      },
      "source": [
        "# Making the Most of your Colab Subscription\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QMMqmdiYMkvi"
      },
      "source": [
        "## Faster GPUs\n",
        "\n",
        "Users who have purchased one of Colab's paid plans have access to faster GPUs and more memory. You can upgrade your notebook's GPU settings in `Runtime > Change runtime type` in the menu to select from several accelerator options, subject to availability.\n",
        "\n",
        "The free of charge version of Colab grants access to Nvidia's T4 GPUs subject to quota restrictions and availability.\n",
        "\n",
        "You can see what GPU you've been assigned at any time by executing the following cell. If the execution result of running the code cell below is \"Not connected to a GPU\", you can change the runtime by going to `Runtime > Change runtime type` in the menu to enable a GPU accelerator, and then re-execute the code cell.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "23TOba33L4qf"
      },
      "outputs": [],
      "source": [
        "gpu_info = !nvidia-smi\n",
        "gpu_info = '\\n'.join(gpu_info)\n",
        "if gpu_info.find('failed') >= 0:\n",
        "  print('Not connected to a GPU')\n",
        "else:\n",
        "  print(gpu_info)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Sa-IrJS1aRVJ"
      },
      "source": [
        "In order to use a GPU with your notebook, select the `Runtime > Change runtime type` menu, and then set the hardware accelerator to the desired option."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "65MSuHKqNeBZ"
      },
      "source": [
        "## More memory\n",
        "\n",
        "Users who have purchased one of Colab's paid plans have access to high-memory VMs when they are available. More powerful GPUs are always offered with high-memory VMs.\n",
        "\n",
        "\n",
        "\n",
        "You can see how much memory you have available at any time by running the following code cell. If the execution result of running the code cell below is \"Not using a high-RAM runtime\", then you can enable a high-RAM runtime via `Runtime > Change runtime type` in the menu. Then select High-RAM in the Runtime shape toggle button. After, re-execute the code cell.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "V1G82GuO-tez"
      },
      "outputs": [],
      "source": [
        "from psutil import virtual_memory\n",
        "ram_gb = virtual_memory().total / 1e9\n",
        "print('Your runtime has {:.1f} gigabytes of available RAM\\n'.format(ram_gb))\n",
        "\n",
        "if ram_gb < 20:\n",
        "  print('Not using a high-RAM runtime')\n",
        "else:\n",
        "  print('You are using a high-RAM runtime!')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BJW8Qi-pPpep"
      },
      "source": [
        "## Longer runtimes\n",
        "\n",
        "All Colab runtimes are reset after some period of time (which is faster if the runtime isn't executing code). Colab Pro and Pro+ users have access to longer runtimes than those who use Colab free of charge.\n",
        "\n",
        "## Background execution\n",
        "\n",
        "Colab Pro+ users have access to background execution, where notebooks will continue executing even after you've closed a browser tab. This is always enabled in Pro+ runtimes as long as you have compute units available.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uLlTRcMM_h0k"
      },
      "source": [
        "## Relaxing resource limits in Colab Pro\n",
        "\n",
        "Your resources are not unlimited in Colab. To make the most of Colab, avoid using resources when you don't need them. For example, only use a GPU when required and close Colab tabs when finished.\n",
        "\n",
        "\n",
        "\n",
        "If you encounter limitations, you can relax those limitations by purchasing more compute units via Pay As You Go. Anyone can purchase compute units via [Pay As You Go](https://colab.research.google.com/signup); no subscription is required."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mm8FzEidvPs6"
      },
      "source": [
        "## Send us feedback!\n",
        "\n",
        "If you have any feedback for us, please let us know. The best way to send feedback is by using the Help > 'Send feedback...' menu. If you encounter usage limits in Colab Pro consider subscribing to Pro+.\n",
        "\n",
        "If you encounter errors or other issues with billing (payments) for Colab Pro, Pro+, or Pay As You Go, please email [colab-billing@google.com](mailto:colab-billing@google.com)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qB3bdLe8jkAa"
      },
      "source": [
        "## More Resources\n",
        "\n",
        "### Working with Notebooks in Colab\n",
        "- [Overview of Colab](/notebooks/basic_features_overview.ipynb)\n",
        "- [Guide to Markdown](/notebooks/markdown_guide.ipynb)\n",
        "- [Importing libraries and installing dependencies](/notebooks/snippets/importing_libraries.ipynb)\n",
        "- [Saving and loading notebooks in GitHub](https://colab.research.google.com/github/googlecolab/colabtools/blob/main/notebooks/colab-github-demo.ipynb)\n",
        "- [Interactive forms](/notebooks/forms.ipynb)\n",
        "- [Interactive widgets](/notebooks/widgets.ipynb)\n",
        "\n",
        "<a name=\"working-with-data\"></a>\n",
        "### Working with Data\n",
        "- [Loading data: Drive, Sheets, and Google Cloud Storage](/notebooks/io.ipynb)\n",
        "- [Charts: visualizing data](/notebooks/charts.ipynb)\n",
        "- [Getting started with BigQuery](/notebooks/bigquery.ipynb)\n",
        "\n",
        "### Machine Learning Crash Course\n",
        "These are a few of the notebooks from Google's online Machine Learning course. See the [full course website](https://developers.google.com/machine-learning/crash-course/) for more.\n",
        "- [Intro to Pandas DataFrame](https://colab.research.google.com/github/google/eng-edu/blob/main/ml/cc/exercises/pandas_dataframe_ultraquick_tutorial.ipynb)\n",
        "- [Linear regression with tf.keras using synthetic data](https://colab.research.google.com/github/google/eng-edu/blob/main/ml/cc/exercises/linear_regression_with_synthetic_data.ipynb)\n",
        "\n",
        "\n",
        "<a name=\"using-accelerated-hardware\"></a>\n",
        "### Using Accelerated Hardware\n",
        "- [TensorFlow with GPUs](/notebooks/gpu.ipynb)\n",
        "- [TensorFlow with TPUs](/notebooks/tpu.ipynb)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RFm2S0Gijqo8"
      },
      "source": [
        "<a name=\"machine-learning-examples\"></a>\n",
        "\n",
        "## Machine Learning Examples\n",
        "\n",
        "To see end-to-end examples of the interactive machine learning analyses that Colab makes possible, check out these tutorials using models from [TensorFlow Hub](https://tfhub.dev).\n",
        "\n",
        "A few featured examples:\n",
        "\n",
        "- [Retraining an Image Classifier](https://tensorflow.org/hub/tutorials/tf2_image_retraining): Build a Keras model on top of a pre-trained image classifier to distinguish flowers.\n",
        "- [Text Classification](https://tensorflow.org/hub/tutorials/tf2_text_classification): Classify IMDB movie reviews as either *positive* or *negative*.\n",
        "- [Style Transfer](https://tensorflow.org/hub/tutorials/tf2_arbitrary_image_stylization): Use deep learning to transfer style between images.\n",
        "- [Multilingual Universal Sentence Encoder Q&A](https://tensorflow.org/hub/tutorials/retrieval_with_tf_hub_universal_encoder_qa): Use a machine learning model to answer questions from the SQuAD dataset.\n",
        "- [Video Interpolation](https://tensorflow.org/hub/tutorials/tweening_conv3d): Predict what happened in a video between the first and the last frame.\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "Making the Most of your Colab Subscription",
      "provenance": [],
      "gpuType": "T4",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "accelerator": "GPU"
  },
  "nbformat": 4,
  "nbformat_minor": 0
}